<?php

/**
 * @file
 * Main module file.
 *
 * Anti-spam module that uses data from www.stopforumspam.com
 * to protect the user registration form against known spammers and spambots.
 */

define('SPAMBOT_ACTION_NONE', 0);
define('SPAMBOT_ACTION_BLOCK', 1);
define('SPAMBOT_ACTION_DELETE', 2);
define('SPAMBOT_DEFAULT_CRITERIA_EMAIL', 1);
define('SPAMBOT_DEFAULT_CRITERIA_USERNAME', 0);
define('SPAMBOT_DEFAULT_CRITERIA_IP', 20);
define('SPAMBOT_DEFAULT_DELAY', 0);
define('SPAMBOT_DEFAULT_CRON_USER_LIMIT', 0);
define('SPAMBOT_DEFAULT_BLOCKED_MESSAGE', 'Your email address or username or IP address is blacklisted.');
define('SPAMBOT_MAX_EVIDENCE_LENGTH', 1024);

/**
 * Implements hook_form_FORM_ID_alter().
 * Function for checking the new registered user is Spam email or not.
 */
function spambot_form_user_register_form_alter(&$form, &$form_state) {
  if (\Drupal::config('spambot.settings')->get('spambot_user_register_protect')) {
    spambot_add_form_protection(
      $form,
      array(
        'mail' => 'mail',
        'name' => 'name',
        'ip' => TRUE,
      )
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function spambot_form_views_form_user_admin_people_page_1_alter(&$form, &$form_state, $form_id) {
 kint($form);die;
  foreach ($form['accounts']['#options'] as $uid => $user_options) {
    // Change $form['accounts']['#options'][$uid]['operations']['data']
    // into a multi-item render array so we can append to it.
    $form['accounts']['#options'][$uid]['operations']['data'] = array(
      'edit' => $form['accounts']['#options'][$uid]['operations']['data'],
    );

    $form['accounts']['#options'][$uid]['operations']['data']['spam'] = array(
      '#type' => 'link',
      '#title' => t('spam'),
      //'#href' => "user/$uid/spambot",
      // Ugly hack to insert a space.
      //'#prefix' => ' ',
    );
  }
}

/**
 * Implements hook_cron().
 */
/*function spambot_cron() {

if($limit = \Drupal::config('spambot.settings')->get('spambot_cron_user_limit', SPAMBOT_DEFAULT_CRON_USER_LIMIT)) {
  $last_uid = \Drupal::config('spambot.settings')->get('spambot_last_checked_uid', 0);
    if ($last_uid < 1) {
      // Skip scanning the anonymous and superadmin users.
      $last_uid = 1;
    }

    $query = db_select('users')
      ->fields('users', array('uid'))
      ->condition('uid', $last_uid, '>')
      ->orderBy('uid')
      ->range(0, $limit);
    
     if ( \Drupal::config('spambot.settings')->get('spambot_check_blocked_accounts', FALSE)) {
      $query->condition('status', 1);
      }

      $uids = $query
      ->execute()
      ->fetchCol();
    if ($uids) {

      $action = \Drupal::config('spambot.settings')->get('spambot_spam_account_action', SPAMBOT_ACTION_NONE);
      $accounts = user_load_multiple($uids);
       $accounts = user_load_multiple($uids);

      foreach ($accounts as $account) {
        $result = spambot_account_is_spammer($account);
      }
    }
}
}*/

/**
 * Checks an account to see if it's a spammer.
 *
 * This one uses configurable automated criteria checking
 * of email and username only.
 *
 * @param object $account
 *   User account.
 *
 * @return int
 *   Positive if spammer, 0 if not spammer, negative if error.
 */
function spambot_account_is_spammer($account) {


}

/**
 * Form builder function to add spambot validations.
 *
 * @param array $form
 *   Form array on which will be added spambot validation.
 * @param array $options
 *   Array of options to be added to form.
 */
function spambot_add_form_protection(array &$form, array $options = array()) {

  // Don't add any protections if the user can bypass the Spambot.
 // if (!\Drupal::currentUser()->hasPermission('protected from spambot scans')) {
    $form['#spambot_validation']['name'] = !empty($options['name']) ? $options['name'] : '';
    $form['#spambot_validation']['mail'] = !empty($options['mail']) ? $options['mail'] : '';
    $form['#spambot_validation']['ip'] = isset($options['ip']) && is_bool($options['ip']) ? $options['ip'] : TRUE;
    //Overriding the ::validateForm() of user registartion form.
    $form['#validate'][] = 'spambot_user_register_form_validate';
  //}
}

/**
 * Validate callback for user_register form.
 */
function spambot_user_register_form_validate(&$form, &$form_state) {

$validation_field_names = $form['#spambot_validation'];
//$values = $form_state['values'];
$values = $form_state->getValues();
$ip = \Drupal::request()->getClientIp();
//$form_errors = form_get_errors();
$form_errors = $form_state->getErrors();
$email_threshold = \Drupal::config('spambot.settings')->get('spambot_criteria_email');
$username_threshold = \Drupal::config('spambot.settings')->get('spambot_criteria_username');
$ip_threshold = \Drupal::config('spambot.settings')->get('spambot_criteria_ip');
  // Build request parameters according to the criteria to use.
  $request = array();
  if (!empty($values[$validation_field_names['mail']]) && $email_threshold > 0 && !spambot_check_whitelist('email', $values[$validation_field_names['mail']])) {
    $request['email'] = $values[$validation_field_names['mail']];
  }

  if (!empty($values[$validation_field_names['name']]) && $username_threshold > 0 && !spambot_check_whitelist('username', $values[$validation_field_names['name']])) {
    $request['username'] = $values[$validation_field_names['name']];
  }

  $ip = \Drupal::request()->getClientIp();
  if ($ip_threshold > 0 && $ip != '127.0.0.1' && $validation_field_names['ip'] && !spambot_check_whitelist('ip', $ip)) {
    // Make sure we have a valid IPv4 address (API doesn't support IPv6 yet).
    if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) === FALSE) {
      \Drupal::logger('spambot')->notice('Invalid IP address on registration: @ip. Spambot will not rely on it.', array('@ip' => $ip));
    }
    else {
      $request['ip'] = $ip;
    }
  }

  // Only do a remote API request if there is anything to check.
  if ($request && !$form_errors) {
    $data = array();
    if (spambot_sfs_request($request, $data)) {
      $substitutions = array(
        '@email' => $values[$validation_field_names['mail']],
        '%email' => $values[$validation_field_names['mail']],
        '@username' => $values[$validation_field_names['name']],
        '%username' => $values[$validation_field_names['name']],
        '@ip' => $ip,
        '%ip' => $ip,
      );
      
      $reasons = array();
      if ($email_threshold > 0 && !empty($data['email']['appears']) && $data['email']['frequency'] >= $email_threshold) {
       // form_set_error('mail', format_string(\Drupal::config('spambot.settings')->get('spambot_blocked_message_email'), $substitutions));
        $form_state->setErrorByName('mail', format_string(\Drupal::config('spambot.settings')->get('spambot_blocked_message_email'), $substitutions));
        $reasons[] = t('email=@value', array('@value' => $request['email']));
      }

      if ($username_threshold > 0 && !empty($data['username']['appears']) && $data['username']['frequency'] >= $username_threshold) {
        //form_set_error('name', format_string(\Drupal::config('spambot.settings')->get('spambot_blocked_message_username'), $substitutions));
        $form_state->setErrorByName('name',  format_string(\Drupal::config('spambot.settings')->get('spambot_blocked_message_username'), $substitutions));
         $reasons[] = t('username=@value', array('@value' => $request['username']));
      }
      if ($ip_threshold > 0 && !empty($data['ip']['appears']) && $data['ip']['frequency'] >= $ip_threshold) {
      //form_set_error('', format_string(\Drupal::config('spambot.settings')->get('spambot_blocked_message_ip'), $substitutions));
        $form_state->setErrorByName('', t('Error Message'));
        $reasons[] = t('ip=@value', array('@value' => $request['ip']));
      }

      if ($reasons) {
        if (\Drupal::config('spambot.settings')->get('spambot_log_blocked_registration')) {
          \Drupal::logger('spambot')->notice('Blocked registration: @reasons', array('@reasons' => implode(',', $reasons)));

          $hook_args = array(
            'request' => $request,
            'reasons' => $reasons,
          );
          \Drupal::moduleHandler()->invokeAll('spambot_registration_blocked', [$hook_args]);
        }

    if ($delay = \Drupal::config('spambot.settings')->get('spambot_blacklisted_delay')) {
          sleep($delay);
        }
      }
    }
  }
}

/**
 * Check if current data $type is whitelisted.
 *
 * @param string $type
 *   Type can be one of these three values: 'ip', 'email' or 'username'.
 * @param string $value
 *   Value to be checked.
 *
 * @return bool
 *   TRUE if data is whitelisted, FALSE otherwise.
 */
function spambot_check_whitelist($type, $value) {
  switch ($type) {
    case 'ip':
      $whitelist_ips = \Drupal::config('spambot.settings')->get('spambot_whitelist_ip');
      $result = strpos($whitelist_ips, $value) !== FALSE;
      break;

    case 'email':
      $whitelist_usernames = \Drupal::config('spambot.settings')->get('spambot_whitelist_email');
      $result = strpos($whitelist_usernames, $value) !== FALSE;
      break;

    case 'username':
      $whitelist_emails = \Drupal::config('spambot.settings')->get('spambot_whitelist_username');
      $result = strpos($whitelist_emails, $value) !== FALSE;
      break;

    default:
      $result = FALSE;
      break;
  }

  return $result;
}

/**
 * Invoke www.stopforumspam.com's api.
 *
 * @param array $query
 *   A keyed array of url parameters ie. array('email' => 'blah@blah.com').
 * @param array $data
 *   An array that will be filled with the data from www.stopforumspam.com.
 *
 * @return bool
 *   TRUE on successful request (and $data will contain the data)
 *   FALSE otherwise.
 */
function spambot_sfs_request(array $query, array &$data) {

  // An empty request results in no match.
  if (empty($query)) {
    return FALSE;
  }

  // Use php serialisation format.
  $query['f'] = 'serial';
  $url = 'http://www.stopforumspam.com/api?' . urldecode(http_build_query($query, '', '&'));
  $response = \Drupal::httpClient()->get(
  $url, array(
  'headers' => array('Accept' => 'text/plain',
  ),
  )
  );

  $status_code = $response->getStatusCode();

  if (!empty($status_code) && $status_code == 200) {
    $data = unserialize($response->getBody()->getContents());
    if (!empty($data['success'])) {
      return TRUE;
    }
    else {

      watchdog('spambot', "Request unsuccessful: %url <pre>\n@dump</pre>", array(
        '%url' => $url,
        '@dump' => print_r($data, TRUE),
      ));
    }
  }
  else {
    watchdog('spambot', "Error contacting service: %url <pre>\n@dump</pre>", array(
      '%url' => $url,
      '@dump' => print_r($result, TRUE),
    ));
  }

  return FALSE;
}